"use strict";

var dictionary = { 
    nullValue: null,
    aString: "string",
    yes: "yes",
    no: "no",
    doggy: false,
    number1: 1,
    otherNumber1: 1,
    number100: 100,
    user: {
        name: "Bob", 
        profile_url: "/profile?id=12345",
        age: function( ){
            return 25;
        },
        add1Method: function( a ){
            return a + 1;
        },
        addMethod: function( a, b ){
            return a + b;
        },
        fireError: function( ){
            //return 1 / 0;
            document.getElementById("mydiv").innerHTML='Success'; //assuming "mydiv" is undefined
        }
    }, 
    tools: [ 
        {name: "tool A", rent_url: "rent?id=1000"}, 
        {name: "tool B", rent_url: "rent?id=1002"}, 
        {name: "tool C", rent_url: "rent?id=1004"},
        {name: "tool D", rent_url: "rent?id=1006"}
    ], 
    rented: { 
        items: [
            {name: "Spanner", cost: 45, days: 3}
        ], 
        total_days: 3,
        total_cost: 45
    } ,
    items: [ 'item0', 'item1', 'item2' ],
    from1To3: [ 1, 2, 3 ],
    add: function( a, b ){
        return a + b;
    },
    function3: function( ){
        return 3;
    },
    divBy0: function( ){
        return 1 / 0;
    }
};



QUnit.test( "Found external macro test using var", function( assert ) {
    
    assert.equal( 0, 0, "Zero, Zero; equal succeeds" );
    
    var t11 = `
<b style="display: none;" data-muse-macro="copyright/externalMacros-definitions.html">
    Macro goes here
</b>
<p data-mmacro="copyright">
    Copyright 2020, <em>Foo, Bar, and Associates</em> Inc.
</p>`;
    //assert.htmlEqualExt( '#t11', t11 );
    
    zpt.run({
        root: $('#block3')[0],
        dictionary: dictionary,
        declaredRemotePageUrls: [ 'externalMacros-definitions2.html' ],
        callback: function(){
            assert.equal( 
                        $( '#t11' ).text().replace(/\s+/, ""), 
                        $( t11 ).text().replace(/\s+/, ""), 
                        "Passed!" ); 
        }
    });

});
    
function getValues( selector ){
    return $( selector ).map( function( index, element ) {
        return this.innerHTML;
    } ).get().join( '/' );
}

}
